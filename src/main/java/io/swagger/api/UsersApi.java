/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.19).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.AccountObject;
import io.swagger.model.Body;
import io.swagger.model.ExtendedUser;
import io.swagger.model.UserResults;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2020-05-17T12:46:50.867Z[GMT]")
@Api(value = "users", description = "the users API")
public interface UsersApi {

    @ApiOperation(value = "creates an account", nickname = "createUser", notes = "Creates an account for the user", response = AccountObject.class, authorizations = {
        @Authorization(value = "bearerAuth")    }, tags={ "Accounts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "the account that has been made for the user", response = AccountObject.class) })
    @RequestMapping(value = "/users/{userId}/accounts",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<AccountObject> createUser(@ApiParam(value = "the userid of the user who owns these accounts",required=true) @PathVariable("userId") String userId
,@ApiParam(value = "The account to create."  )  @Valid @RequestBody Body body
);


    @ApiOperation(value = "Delete a user by id.", nickname = "deleteUser", notes = "Delete a specific user.", authorizations = {
        @Authorization(value = "bearerAuth")    }, tags={ "Users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "the user has been deleted") })
    @RequestMapping(value = "/users/{userid}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteUser(@ApiParam(value = "",required=true) @PathVariable("userid") Integer userid
);


    @ApiOperation(value = "Update user info.", nickname = "editUser", notes = "User(customer,employee) can update users.", response = ExtendedUser.class, authorizations = {
        @Authorization(value = "bearerAuth")    }, tags={ "Users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "the user info has been edited", response = ExtendedUser.class) })
    @RequestMapping(value = "/users/{userid}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<ExtendedUser> editUser(@ApiParam(value = "",required=true) @PathVariable("userid") Integer userid
,@ApiParam(value = ""  )  @Valid @RequestBody ExtendedUser body
);


    @ApiOperation(value = "Get accounts for a specific user.", nickname = "getAccountsByUserId", notes = "", response = AccountObject.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")    }, tags={ "Accounts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "A list of all users accounts", response = AccountObject.class, responseContainer = "List") })
    @RequestMapping(value = "/users/{userId}/accounts",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<AccountObject>> getAccountsByUserId(@ApiParam(value = "the user who ownes these accounts",required=true) @PathVariable("userId") String userId
);


    @ApiOperation(value = "Get users", nickname = "getAllUsers", notes = "Return all users", response = UserResults.class, authorizations = {
        @Authorization(value = "bearerAuth")    }, tags={ "Users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Users list.", response = UserResults.class) })
    @RequestMapping(value = "/users",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<UserResults> getAllUsers(@ApiParam(value = "Limit the number of users to display.", defaultValue = "20") @Valid @RequestParam(value = "limit", required = false, defaultValue="20") Integer limit
);

}
