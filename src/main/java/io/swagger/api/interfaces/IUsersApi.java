/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.19).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api.interfaces;

import io.swagger.model.content.Account;
import io.swagger.model.api.JsonResponse;
import io.swagger.model.api.UserCredentials;
import io.swagger.model.content.User;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import javax.validation.Valid;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2020-05-21T18:10:30.703Z[GMT]")
@Api(value = "users", description = "the users API")
public interface IUsersApi {

    @ApiOperation(value = "creates an account", nickname = "createAccount", notes = "Creates an account for the user", response = Account.class, authorizations = {
            @Authorization(value = "bearerAuth")}, tags = {"Accounts",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "the account that has been made for the user.", response = Account.class)})
    @RequestMapping(value = "/users/{userId}/accounts",
            produces = {"application/json"},
            consumes = {"application/json"},
            method = RequestMethod.POST)
    ResponseEntity<JsonResponse> createAccount(@ApiParam(value = "the userid of the user who owns these accounts", required = true) @PathVariable("userId") Integer userId
            , @Valid @RequestParam(value = "accountType", required = true) String accountType
    );


    @ApiOperation(value = "Creates a User", nickname = "createUser", notes = "Creates a user", response = UserCredentials.class, authorizations = {
            @Authorization(value = "bearerAuth")}, tags = {"Users",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "the user.", response = UserCredentials.class)})
    @RequestMapping(value = "/users",
            produces = {"application/json"},
            consumes = {"application/json"},
            method = RequestMethod.POST)
    ResponseEntity<JsonResponse> createUser(@ApiParam(value = "") @Valid @RequestBody User body
    );


    @ApiOperation(value = "Delete a user by id.", nickname = "deleteUser", notes = "Delete a specific user.", authorizations = {
            @Authorization(value = "bearerAuth")}, tags = {"Users",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "the user has been deleted")})
    @RequestMapping(value = "/users/{userid}",
            method = RequestMethod.DELETE)
    ResponseEntity<JsonResponse> deleteUser(@ApiParam(value = "", required = true) @PathVariable("userid") Integer userid
    );


    @ApiOperation(value = "Update user info.", nickname = "editUser", notes = "User(customer,employee) can update users.", response = User.class, authorizations = {
            @Authorization(value = "bearerAuth")}, tags = {"Users",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "the user info has been edited", response = User.class)})
    @RequestMapping(value = "/users/{userid}",
            produces = {"application/json"},
            consumes = {"application/json"},
            method = RequestMethod.PUT)
    ResponseEntity<JsonResponse> editUser(@ApiParam(value = "", required = true) @PathVariable("userid") Integer userid
            , @ApiParam(value = "") @Valid @RequestBody User body
    );


    @ApiOperation(value = "Get accounts for a specific user.", nickname = "getAccountsByUserId", notes = "", response = Account.class, responseContainer = "List", authorizations = {
            @Authorization(value = "bearerAuth")}, tags = {"Accounts",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "A list of all users accounts", response = Account.class, responseContainer = "List")})
    @RequestMapping(value = "/users/{userId}/accounts",
            produces = {"application/json"},
            method = RequestMethod.GET)
    ResponseEntity<JsonResponse> getAccountsByUserId(@ApiParam(value = "the user who ownes these accounts", required = true) @PathVariable("userId") Integer userId
    );


    @ApiOperation(value = "Get users", nickname = "getAllUsers", notes = "Return all users", response = UserCredentials.class, responseContainer = "List", authorizations = {
            @Authorization(value = "bearerAuth")}, tags = {"Users",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Users list.", response = UserCredentials.class, responseContainer = "List")})
    @RequestMapping(value = "/users",
            produces = {"application/json"},
            method = RequestMethod.GET)
    ResponseEntity<JsonResponse> getAllUsers(@ApiParam(value = "Limit the number of users to display.", defaultValue = "20") @Valid @RequestParam(value = "limit", required = false, defaultValue = "20") Integer limit
            , @ApiParam(value = "The number of items to skip before starting to collect the result set") @Valid @RequestParam(value = "offset", required = false) Integer offset
    );

}
